name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: DATABASE_URL
        script: |
          # --- Configuration Variables ---
          PROJECT_DIR="/home/ubuntu/sentiment-analysis-api"
          VENV_PATH="/home/ubuntu/sentiment_env/bin/activate"
          PID_FILE="$PROJECT_DIR/app.pid"

          echo "🚀 Starting deployment..."
          cd $PROJECT_DIR || { echo "❌ Project directory not found!"; exit 1; }

          echo "📥 Pulling latest code from main branch..."
          git pull origin main

          echo "🐍 Activating virtual environment..."
          source $VENV_PATH

          echo "📦 Installing/updating dependencies..."
          pip install -r requirements.txt

          echo "🛑 Stopping the old version of the application (if running)..."
          if [ -f $PID_FILE ]; then
            echo "PID file found. Stopping process `cat $PID_FILE`..."
            # The kill command sends the TERM signal to the process ID in the file
            kill $(cat $PID_FILE) || true
            rm $PID_FILE
            sleep 5 # Give the process time to shut down gracefully
          else
            echo "No PID file found. Assuming no process is running."
          fi

          echo "🚀 Starting the new version of the application..."
          # Start the app in the background and save its PID to the PID file
          DATABASE_URL=${{ secrets.DATABASE_URL }} nohup uvicorn main:app --host 0.0.0.0 --port 8000 > api.log 2>&1 & echo $! > $PID_FILE

          echo "PID of new process is `cat $PID_FILE`"
          echo "⏳ Waiting for application to become healthy..."
          
          # This loop replaces the unreliable 'sleep'
          for i in {1..12}; do
            if curl -sS --fail http://localhost:8000/health; then
              echo "✅ Application is healthy!"
              break
            fi
            echo "Attempt $i/12: Application not ready yet. Waiting 5 seconds..."
            sleep 5
          done

          # Final health check to ensure the loop succeeded
          if ! curl -sS --fail http://localhost:8000/health; then
            echo "❌ Deployment failed: Application did not become healthy in time."
            echo "Displaying last 20 lines of api.log for debugging:"
            tail -n 20 api.log
            exit 1
          fi
          
          echo "🎉 Deployment successful!"
