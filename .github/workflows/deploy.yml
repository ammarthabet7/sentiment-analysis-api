name: CI/CD Pipeline

# When should this workflow run?
on:
  push:
    branches: [ main ]  # Only run on main branch pushes
  pull_request:
    branches: [ main ]  # Also run on pull requests to main

# Define the jobs that will run
jobs:
  # Job 1: Continuous Integration (Testing)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Get the code
    - name: Checkout code
      uses: actions/checkout@v3
      
    # Step 2: Set up Python environment
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    # Step 3: Cache dependencies for faster builds
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    # Step 4: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx
        
    # Step 5: Run the tests
    - name: Run tests
      run: |
        python -m pytest tests/ -v
        
    # Step 6: Test health endpoint (integration test)
    - name: Test application startup
      run: |
        # Start the app in background
        python main.py &
        APP_PID=$!
        
        # Wait for app to start
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Clean up
        kill $APP_PID

  # Job 2: Continuous Deployment (Only if tests pass)
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: test  # This job only runs if 'test' job succeeds
    if: github.ref == 'refs/heads/main'  # Only deploy from main branch
    
    steps:
    # Step 1: Get the code
    - name: Checkout code
      uses: actions/checkout@v3
      
    # Step 2: Deploy to AWS EC2
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: DATABASE_URL
        script: |
          echo "🚀 Starting deployment..."
          
          # Navigate to project directory
          cd sentiment-analysis-api || exit 1
          
          # Pull latest changes
          echo "📥 Pulling latest code..."
          git pull origin main
          
          # Activate virtual environment
          echo "🔧 Setting up environment..."
          source ../sentiment_env/bin/activate
          
          # Install/update dependencies
          echo "📦 Installing dependencies..."
          pip install -r requirements.txt
          
          # Set environment variables for production
          echo "⚙️ Setting environment variables..."
          export DATABASE_URL="${{ secrets.DATABASE_URL }}"
          
          # Stop existing application
          echo "🛑 Stopping existing application..."
          sudo pkill -f "python main.py" || true
          
          # Wait a moment for graceful shutdown
          sleep 5
          
          # Start new application
          echo "🚀 Starting new application..."
          nohup python main.py > api.log 2>&1 &
          
          # Wait for application to start
          echo "⏳ Waiting for application to start..."
          sleep 30
          
          # Test that application is healthy
          echo "🔍 Testing application health..."
          curl -f http://localhost:8000/health || exit 1
          
          # Test sentiment analysis endpoint
          echo "🧪 Testing sentiment analysis..."
          curl -X POST "http://localhost:8000/analyze" \
               -H "Content-Type: application/json" \
               -d '{"text": "Deployment successful!"}' || exit 1
          
          echo "✅ Deployment completed successfully!"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    # Step 3: Notify on deployment success
    - name: Deployment Success Notification
      if: success()
      run: |
        echo "✅ Deployment to production completed successfully!"
        echo "🔗 API is running at: http://${{ secrets.EC2_HOST }}:8000"
        
    # Step 4: Notify on deployment failure
    - name: Deployment Failure Notification
      if: failure()
      run: |
        echo "❌ Deployment failed! Check the logs above."
        exit 1
